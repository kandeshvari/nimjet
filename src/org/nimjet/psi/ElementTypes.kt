package org.nimjet.psi

import com.intellij.psi.tree.IElementType
import org.nimjet.NimLanguage

public class ElementTypes2 {
//	val IDENT: IElementType = NimTokenType("IDENT");
//	val ACCENT_QUOTED: IElementType = NimTokenType("ACCENT_QUOTED");
//	val INT_LITERAL: IElementType = NimTokenType("INT_LITERAL");
//	val INT8_LITERAL: IElementType = NimTokenType("INT8_LITERAL");
//	val INT16_LITERAL: IElementType = NimTokenType("INT16_LITERAL");
//	val INT32_LITERAL: IElementType = NimTokenType("INT32_LITERAL");
//	val INT64_LITERAL: IElementType = NimTokenType("INT64_LITERAL");
//	val UINT_LITERAL: IElementType = NimTokenType("UINT_LITERAL");
//	val UINT8_LITERAL: IElementType = NimTokenType("UINT8_LITERAL");
//	val UINT16_LITERAL: IElementType = NimTokenType("UINT16_LITERAL");
//	val UINT32_LITERAL: IElementType = NimTokenType("UINT32_LITERAL");
//	val UINT64_LITERAL: IElementType = NimTokenType("UINT64_LITERAL");
//	val FLOAT_LITERAL: IElementType = NimTokenType("FLOAT_LITERAL");
//	val FLOAT32_LITERAL: IElementType = NimTokenType("FLOAT32_LITERAL");
//	val FLOAT64_LITERAL: IElementType = NimTokenType("FLOAT64_LITERAL");
//	val CHARACTER_LITERAL: IElementType = NimTokenType("CHARACTER_LITERAL");
//	val TRIPLESTR_LITERAL: IElementType = NimTokenType("TRIPLESTR_LITERAL");
//	val STRING_LITERAL: IElementType = NimTokenType("STRING_LITERAL");
//	val BLOCK_COMMENT: IElementType = NimTokenType("BLOCK_COMMENT");
//	val LINE_COMMENT: IElementType = NimTokenType("LINE_COMMENT");
//	val OPERATOR: IElementType = NimTokenType("OPERATOR");
//	val T_ADDR: IElementType = NimTokenType("T_ADDR");
//	val T_AND: IElementType = NimTokenType("T_AND");
//	val T_AS: IElementType = NimTokenType("T_AS");
//	val T_ASM: IElementType = NimTokenType("T_ASM");
//	val T_ATOMIC: IElementType = NimTokenType("T_ATOMIC");
//	val T_BIND: IElementType = NimTokenType("T_BIND");
//	val T_BLOCK: IElementType = NimTokenType("T_BLOCK");
//	val T_BRACEDOT: IElementType = NimTokenType("T_BRACEDOT");
//	val T_BREAK: IElementType = NimTokenType("T_BREAK");
//	val T_CASE: IElementType = NimTokenType("T_CASE");
//	val T_CAST: IElementType = NimTokenType("T_CAST");
//	val T_COLON: IElementType = NimTokenType("T_COLON");
//	val T_COMMA: IElementType = NimTokenType("T_COMMA");
//	val T_CONCEPT: IElementType = NimTokenType("T_CONCEPT");
//	val T_CONST: IElementType = NimTokenType("T_CONST");
//	val T_CONTINUE: IElementType = NimTokenType("T_CONTINUE");
//	val T_CONVERTER: IElementType = NimTokenType("T_CONVERTER");
//	val T_DBLCOLON: IElementType = NimTokenType("T_DBLCOLON");
//	val T_DEFER: IElementType = NimTokenType("T_DEFER");
//	val T_DISCARD: IElementType = NimTokenType("T_DISCARD");
//	val T_DISTINCT: IElementType = NimTokenType("T_DISTINCT");
//	val T_DIV: IElementType = NimTokenType("T_DIV");
//	val T_DO: IElementType = NimTokenType("T_DO");
//	val T_DOT: IElementType = NimTokenType("T_DOT");
//	val T_DOTBRACE: IElementType = NimTokenType("T_DOTBRACE");
//	val T_DOTDOT: IElementType = NimTokenType("T_DOTDOT");
//	val T_ELIF: IElementType = NimTokenType("T_ELIF");
//	val T_ELSE: IElementType = NimTokenType("T_ELSE");
//	val T_END: IElementType = NimTokenType("T_END");
//	val T_ENUM: IElementType = NimTokenType("T_ENUM");
//	val T_EQ: IElementType = NimTokenType("T_EQ");
//	val T_EXCEPT: IElementType = NimTokenType("T_EXCEPT");
//	val T_EXPORT: IElementType = NimTokenType("T_EXPORT");
//	val T_FINALLY: IElementType = NimTokenType("T_FINALLY");
//	val T_FOR: IElementType = NimTokenType("T_FOR");
//	val T_FROM: IElementType = NimTokenType("T_FROM");
//	val T_FUNC: IElementType = NimTokenType("T_FUNC");
//	val T_GENERIC: IElementType = NimTokenType("T_GENERIC");
//	val T_IF: IElementType = NimTokenType("T_IF");
//	val T_IMPORT: IElementType = NimTokenType("T_IMPORT");
//	val T_IN: IElementType = NimTokenType("T_IN");
//	val T_INCLUDE: IElementType = NimTokenType("T_INCLUDE");
//	val T_INTERFACE: IElementType = NimTokenType("T_INTERFACE");
//	val T_IS: IElementType = NimTokenType("T_IS");
//	val T_ISNOT: IElementType = NimTokenType("T_ISNOT");
//	val T_ITERATOR: IElementType = NimTokenType("T_ITERATOR");
//	val T_LBRACE: IElementType = NimTokenType("T_LBRACE");
//	val T_LBRACKET: IElementType = NimTokenType("T_LBRACKET");
//	val T_LET: IElementType = NimTokenType("T_LET");
//	val T_LPAREN: IElementType = NimTokenType("T_LPAREN");
//	val T_MACRO: IElementType = NimTokenType("T_MACRO");
//	val T_METHOD: IElementType = NimTokenType("T_METHOD");
//	val T_MIXIN: IElementType = NimTokenType("T_MIXIN");
//	val T_MOD: IElementType = NimTokenType("T_MOD");
//	val T_NIL: IElementType = NimTokenType("T_NIL");
//	val T_NOT: IElementType = NimTokenType("T_NOT");
//	val T_NOTIN: IElementType = NimTokenType("T_NOTIN");
//	val T_OBJECT: IElementType = NimTokenType("T_OBJECT");
//	val T_OF: IElementType = NimTokenType("T_OF");
//	val T_OR: IElementType = NimTokenType("T_OR");
//	val T_OUT: IElementType = NimTokenType("T_OUT");
//	val T_PROC: IElementType = NimTokenType("T_PROC");
//	val T_PTR: IElementType = NimTokenType("T_PTR");
//	val T_RAISE: IElementType = NimTokenType("T_RAISE");
//	val T_RBRACE: IElementType = NimTokenType("T_RBRACE");
//	val T_RBRACKET: IElementType = NimTokenType("T_RBRACKET");
//	val T_REF: IElementType = NimTokenType("T_REF");
//	val T_RETURN: IElementType = NimTokenType("T_RETURN");
//	val T_RPAREN: IElementType = NimTokenType("T_RPAREN");
//	val T_SEMICOLON: IElementType = NimTokenType("T_SEMICOLON");
//	val T_SHL: IElementType = NimTokenType("T_SHL");
//	val T_SHR: IElementType = NimTokenType("T_SHR");
//	val T_STATIC: IElementType = NimTokenType("T_STATIC");
//	val T_TEMPLATE: IElementType = NimTokenType("T_TEMPLATE");
//	val T_TRY: IElementType = NimTokenType("T_TRY");
//	val T_TUPLE: IElementType = NimTokenType("T_TUPLE");
//	val T_TYPE: IElementType = NimTokenType("T_TYPE");
//	val T_USING: IElementType = NimTokenType("T_USING");
//	val T_VAR: IElementType = NimTokenType("T_VAR");
//	val T_WHEN: IElementType = NimTokenType("T_WHEN");
//	val T_WHILE: IElementType = NimTokenType("T_WHILE");
//	val T_WITH: IElementType = NimTokenType("T_WITH");
//	val T_WITHOUT: IElementType = NimTokenType("T_WITHOUT");
//	val T_XOR: IElementType = NimTokenType("T_XOR");
//	val T_YIELD: IElementType = NimTokenType("T_YIELD");
//	val ASM_STMT: IElementType = NimTokenType("ASM_STMT");
//	val ASSIGNMENT_EXPR: IElementType = NimTokenType("ASSIGNMENT_EXPR");
//	val BIND_STMT: IElementType = NimTokenType("BIND_STMT");
//	val BLOCK: IElementType = NimTokenType("BLOCK");
//	val BLOCK_STMT: IElementType = NimTokenType("BLOCK_STMT");
//	val BRACKET_CTOR: IElementType = NimTokenType("BRACKET_CTOR");
//	val BRACKET_EXPR: IElementType = NimTokenType("BRACKET_EXPR");
//	val BREAK_STMT: IElementType = NimTokenType("BREAK_STMT");
//	val CALL_EXPR: IElementType = NimTokenType("CALL_EXPR");
//	val CASE_EXPR: IElementType = NimTokenType("CASE_EXPR");
//	val CASE_STMT: IElementType = NimTokenType("CASE_STMT");
//	val CAST_EXPR: IElementType = NimTokenType("CAST_EXPR");
//	val COMMAND_EXPR: IElementType = NimTokenType("COMMAND_EXPR");
//	val CONST_DEF: IElementType = NimTokenType("CONST_DEF");
//	val CONST_SECT: IElementType = NimTokenType("CONST_SECT");
//	val CONTINUE_STMT: IElementType = NimTokenType("CONTINUE_STMT");
//	val CTOR_ARG: IElementType = NimTokenType("CTOR_ARG");
//	val DISCARD_STMT: IElementType = NimTokenType("DISCARD_STMT");
//	val DISTINCT_TYPE_CLASS: IElementType = NimTokenType("DISTINCT_TYPE_CLASS");
//	val DISTINCT_TYPE_EXPR: IElementType = NimTokenType("DISTINCT_TYPE_EXPR");
//	val DOT_EXPR: IElementType = NimTokenType("DOT_EXPR");
//	val DO_BLOCK: IElementType = NimTokenType("DO_BLOCK");
//	val ENUM_DEF: IElementType = NimTokenType("ENUM_DEF");
//	val ENUM_MEMBER: IElementType = NimTokenType("ENUM_MEMBER");
//	val ENUM_TYPE_CLASS: IElementType = NimTokenType("ENUM_TYPE_CLASS");
//	val EXPR_STMT: IElementType = NimTokenType("EXPR_STMT");
//	val FOR_STMT: IElementType = NimTokenType("FOR_STMT");
//	val FROM_STMT: IElementType = NimTokenType("FROM_STMT");
//	val GENERIC_PARAM: IElementType = NimTokenType("GENERIC_PARAM");
//	val GROUPED_EXPR: IElementType = NimTokenType("GROUPED_EXPR");
//	val IDENTIFIER: IElementType = NimTokenType("IDENTIFIER");
//	val IDENTIFIER_DEF: IElementType = NimTokenType("IDENTIFIER_DEF");
//	val IDENTIFIER_DEFS: IElementType = NimTokenType("IDENTIFIER_DEFS");
//	val IDENTIFIER_EXPR: IElementType = NimTokenType("IDENTIFIER_EXPR");
//	val IDENT_PRAGMA_PAIR: IElementType = NimTokenType("IDENT_PRAGMA_PAIR");
//	val IF_EXPR: IElementType = NimTokenType("IF_EXPR");
//	val IF_STMT: IElementType = NimTokenType("IF_STMT");
//	val IMPORT_STMT: IElementType = NimTokenType("IMPORT_STMT");
//	val INCLUDE_STMT: IElementType = NimTokenType("INCLUDE_STMT");
//	val INFIX_EXPR: IElementType = NimTokenType("INFIX_EXPR");
//	val ITERATOR_DEF: IElementType = NimTokenType("ITERATOR_DEF");
//	val LET_SECT: IElementType = NimTokenType("LET_SECT");
//	val LITERAL: IElementType = NimTokenType("LITERAL");
//	val MACRO_DEF: IElementType = NimTokenType("MACRO_DEF");
//	val MIXIN_STMT: IElementType = NimTokenType("MIXIN_STMT");
//	val NIL_TOKEN: IElementType = NimTokenType("NIL_TOKEN");
//	val OBJECT_CTOR: IElementType = NimTokenType("OBJECT_CTOR");
//	val OBJECT_DEF: IElementType = NimTokenType("OBJECT_DEF");
//	val OBJECT_FIELDS: IElementType = NimTokenType("OBJECT_FIELDS");
//	val OBJECT_TYPE_CLASS: IElementType = NimTokenType("OBJECT_TYPE_CLASS");
//	val PATTERN: IElementType = NimTokenType("PATTERN");
//	val PRAGMA: IElementType = NimTokenType("PRAGMA");
//	val PRAGMA_STMT: IElementType = NimTokenType("PRAGMA_STMT");
//	val PREFIX_EXPR: IElementType = NimTokenType("PREFIX_EXPR");
//	val PROC_DEF: IElementType = NimTokenType("PROC_DEF");
//	val PROC_EXPR: IElementType = NimTokenType("PROC_EXPR");
//	val PROC_TYPE_CLASS: IElementType = NimTokenType("PROC_TYPE_CLASS");
//	val PROC_TYPE_EXPR: IElementType = NimTokenType("PROC_TYPE_EXPR");
//	val PTR_TYPE_CLASS: IElementType = NimTokenType("PTR_TYPE_CLASS");
//	val PTR_TYPE_EXPR: IElementType = NimTokenType("PTR_TYPE_EXPR");
//	val RAISE_STMT: IElementType = NimTokenType("RAISE_STMT");
//	val REF_TYPE_CLASS: IElementType = NimTokenType("REF_TYPE_CLASS");
//	val REF_TYPE_EXPR: IElementType = NimTokenType("REF_TYPE_EXPR");
//	val RETURN_STMT: IElementType = NimTokenType("RETURN_STMT");
//	val SET_OR_TABLE_CTOR: IElementType = NimTokenType("SET_OR_TABLE_CTOR");
//	val STATIC_STMT: IElementType = NimTokenType("STATIC_STMT");
//	val STATIC_TYPE_EXPR: IElementType = NimTokenType("STATIC_TYPE_EXPR");
//	val STMT_LIST_EXPR: IElementType = NimTokenType("STMT_LIST_EXPR");
//	val TEMPLATE_DEF: IElementType = NimTokenType("TEMPLATE_DEF");
//	val TRY_STMT: IElementType = NimTokenType("TRY_STMT");
//	val TUPLE_CTOR: IElementType = NimTokenType("TUPLE_CTOR");
//	val TUPLE_DEF: IElementType = NimTokenType("TUPLE_DEF");
//	val TUPLE_TYPE_CLASS: IElementType = NimTokenType("TUPLE_TYPE_CLASS");
//	val TUPLE_TYPE_EXPR: IElementType = NimTokenType("TUPLE_TYPE_EXPR");
//	val ementType: IElementType = NimTokenType("ementType");
//	val TYPE_DESC: IElementType = NimTokenType("TYPE_DESC");
//	val TYPE_SECT: IElementType = NimTokenType("TYPE_SECT");
//	val VAR_DEF: IElementType = NimTokenType("VAR_DEF");
//	val VAR_SECT: IElementType = NimTokenType("VAR_SECT");
//	val VAR_TYPE_CLASS: IElementType = NimTokenType("VAR_TYPE_CLASS");
//	val VAR_TYPE_EXPR: IElementType = NimTokenType("VAR_TYPE_EXPR");
//	val WHEN_EXPR: IElementType = NimTokenType("WHEN_EXPR");
//	val WHEN_STMT: IElementType = NimTokenType("WHEN_STMT");
//	val WHILE_STMT: IElementType = NimTokenType("WHILE_STMT");
//	val YIELD_STMT: IElementType = NimTokenType("YIELD_STMT");
}
